# -*- coding: utf-8 -*-
"""Untitled18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Sht8QuCrSgta5GsjI518lO1gIeruIy-8
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

df = pd.read_csv(r'https://raw.githubusercontent.com/YBI-Foundation/Dataset/main/Movies%20Recommendation.csv')

# Features for content-based filtering
features = ['Movie_Genre', 'Movie_Language', 'Movie_Popularity', 'Movie_Runtime', 'Movie_Vote', 'Movie_Vote_Count']

# Fill NaN values with empty strings or zeros for numerical columns
df[features] = df[features].fillna('')  # For categorical features
df['Movie_Vote_Count'] = df['Movie_Vote_Count'].fillna(0)  # For numerical features

df['combined_features'] = df.apply(lambda row: ' '.join([str(row[feature]) for feature in features]), axis=1)

tfidf_vectorizer = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf_vectorizer.fit_transform(df['combined_features'])

movie_similarity = cosine_similarity(tfidf_matrix)

# Create a DataFrame with movie similarity values
movie_similarity_df = pd.DataFrame(movie_similarity, index=df['Movie_ID'], columns=df['Movie_ID'])

def get_content_based_recommendations(movie_id, num_recommendations=5):
    similar_movies = movie_similarity_df[movie_id].sort_values(ascending=False)[1:num_recommendations+1]
    recommended_movies = df[df['Movie_ID'].isin(similar_movies.index)][['Movie_ID', 'Movie_Title']]
    return recommended_movies

# Example usage of content-based filtering recommendation system
movie_id = 1
content_based_recommendations = get_content_based_recommendations(movie_id)
print(f"Content-Based Filtering Recommendations for Movie {movie_id}:")
print(content_based_recommendations)